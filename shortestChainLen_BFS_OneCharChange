YouTube URL: https://www.youtube.com/watch?v=6pIC20wCm20&index=6&list=PLqM7alHXFySEaZgcg7uRYJFBnYMLti-nh
Code-Explanation URL: https://www.geeksforgeeks.org/word-ladder-length-of-shortest-chain-to-reach-a-target-word/

Question:
Given a dictionary, and two words ‘start’ and ‘target’ (both of same length). 
Find length of the smallest chain from ‘start’ to ‘target’ if it exists, 
such that adjacent words in the chain only differ by one character 
and each word in the chain is a valid word i.e., it exists in the dictionary. 
It may be assumed that the ‘target’ word exists in dictionary and length of all dictionary words is same.

Answer:
using System.Collections.Generic;
using System.Linq;

namespace Practice_ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            string start = "TOON";
            string target = "PLEA";
            List<string> D = new List<string>() { "POON", "PLEE", "SAME", "POIE", "PLEA", "PLIE", "POIN" };

            var result = shortestChainLen(start, target, D);              
        }

        public struct QItem
        {
            public string word;
            public int len;
        };

        // Returns length of shortest chain to reach 'target' from 'start' 
        // using minimum number of adjacent moves.  D is dictionary 
        public static int shortestChainLen(string start, string target, List<string> D)
        {
            // Create a queue for BFS and insert 'start' as source vertex 
            Queue<QItem> Q = new Queue<QItem>();
            QItem item = new QItem() { word = start, len = 1 };  // Chain length for start word is 1 
            Q.Enqueue(item);

            // While queue is not empty 
            while (Q.Count() != 0)
            {
                // Take the front word 
                QItem curr = Q.Dequeue();                

                // Go through all words of dictionary 
                //for (set<string>::iterator it = D.begin(); it != D.end(); it++)
                foreach(string dirword in D)
                {
                    // Process a dictionary word if it is adjacent to current 
                    // word (or vertex) of BFS 
                    string temp = dirword;
                    if (isadjacent(curr.word, temp))
                    {
                        // Add the dictionary word to Q 
                        item.word = temp;
                        item.len = curr.len + 1;
                        Q.Enqueue(item);
                        
                        // If we reached target 
                        if (temp == target)
                            return item.len;
                    }
                }
            }
            return 0;
        }

        // To check if strings differ by exactly one character 
        public static bool isadjacent(string a, string b)
        {
            int count = 0;  // to store count of differences 
            int n = a.Length;

            // Iterate through all characters and return false 
            // if there are more than one mismatching characters 
            for (int i = 0; i < n; i++)
            {
                if (a[i] != b[i]) count++;
                if (count > 1) return false;
            }
            return count == 1 ? true : false;
        }

    }
}
