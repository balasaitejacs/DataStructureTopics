//https://www.geeksforgeeks.org/dijkstras-algorithm-for-adjacency-list-representation-greedy-algo-8/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Amazon
{
    class DijkstraAlg_Optimized_UsingAdjList_SortestPathDistance_UndirectedGraph_Complicated
    {
        //https://www.geeksforgeeks.org/dijkstras-algorithm-for-adjacency-list-representation-greedy-algo-8/
        //C# Version of the algorithm in above link.
        /*
         * Time Complexity: The time complexity of the above code/algorithm looks O(V^2) as there are two nested while loops. 
         * If we take a closer look, we can observe that the statements in inner loop are executed O(V+E) times (similar to BFS). 
         * The inner loop has decreaseKey() operation which takes O(LogV) time. 
         * So overall time complexity is O(E+V)*O(LogV) which is O((E+V)*LogV) = O(ELogV).
         * Note that the above code uses Binary Heap for Priority Queue implementation. 
         * Time complexity can be reduced to O(E + VLogV) using Fibonacci Heap. 
         * The reason is, Fibonacci Heap takes O(1) time for decrease-key operation while Binary Heap takes O(Logn) time.
         * 
         * Heap Data Structure URL: https://www.geeksforgeeks.org/heap-data-structure/
         * Min-Heap: In a Min-Heap the key present at the root node must be minimum among the keys present at all of itâ€™s children. 
         * The same property must be recursively true for all sub-trees in that Binary Tree.
         */

        #region Global Members
        // A utility function to create a new adjacency list node 
        public static AdjListNode newAdjListNode(int dest, int weight)
        {
            AdjListNode newNode = new AdjListNode();
            newNode.dest = dest;
            newNode.weight = weight;
            newNode.next = null;
            return newNode;
        }

        // A utility function that creates a graph of V vertices 
        public static Graph createGraph(int V)
        {
            Graph graph = new Graph();
            graph.V = V;

            // Create an array of adjacency lists.  Size of array will be V             
            //graph.array = Enumerable.Repeat(new AdjList(), V).ToArray(); //This is not working as expected. Not sure why.
            graph.array = Arrays.InitializeWithDefaultInstances<AdjList>(V);

            return graph;
        }

        // Adds an edge to an undirected graph 
        public static void addEdge(Graph graph, int src, int dest, int weight)
        {
            // Add an edge from src to dest.  A new node is added to the adjacency 
            // list of src.  The node is added at the begining 
            AdjListNode newNode = newAdjListNode(dest, weight);
            newNode.next = graph.array[src].head;
            graph.array[src].head = newNode;

            // Since graph is undirected, add an edge from dest to src also 
            newNode = newAdjListNode(src, weight);
            newNode.next = graph.array[dest].head;
            graph.array[dest].head = newNode;
        }

        // A utility function to create a new Min Heap Node 
        public static MinHeapNode newMinHeapNode(int v, int dist)
        {
            MinHeapNode minHeapNode = new MinHeapNode();
            minHeapNode.v = v;
            minHeapNode.dist = dist;
            return minHeapNode;
        }
        #endregion

        //This variable is used to print shortest distance path
        private static readonly int NO_PARENT = -1;

        static void Main(string[] args)
        {
            // create the graph given in above fugure 
            int V = 9;
            Graph graph = createGraph(V);
            addEdge(graph, 0, 1, 4);
            addEdge(graph, 0, 7, 8);
            addEdge(graph, 1, 2, 8);
            addEdge(graph, 1, 7, 11);
            addEdge(graph, 2, 3, 7);
            addEdge(graph, 2, 8, 2);
            addEdge(graph, 2, 5, 4);
            addEdge(graph, 3, 4, 9);
            addEdge(graph, 3, 5, 14);
            addEdge(graph, 4, 5, 10);
            addEdge(graph, 5, 6, 2);
            addEdge(graph, 6, 7, 1);
            addEdge(graph, 6, 8, 6);
            addEdge(graph, 7, 8, 7);

            dijkstra(graph, 0);
        }

        private static MinHeap createMinHeap(int capacity)
        {
            MinHeap minHeap = new MinHeap();
            minHeap.pos = new int[capacity];
            minHeap.size = 0;
            minHeap.capacity = capacity;
            minHeap.array = new MinHeapNode[capacity];

            return minHeap;
        }

        // A standard function to heapify at given idx 
        // This function also updates position of nodes when they are swapped. 
        // Position is needed for decreaseKey() 
        private static void minHeapify(MinHeap minHeap, int idx)
        {
            int smallest;
            int left;
            int right;
            smallest = idx;
            left = 2 * idx + 1;
            right = 2 * idx + 2;

            if (left < minHeap.size && minHeap.array[left].dist < minHeap.array[smallest].dist)
            {
                smallest = left;
            }

            if (right < minHeap.size && minHeap.array[right].dist < minHeap.array[smallest].dist)
            {
                smallest = right;
            }

            if (smallest != idx)
            {
                // The nodes to be swapped in min heap 
                MinHeapNode smallestNode = minHeap.array[smallest];
                MinHeapNode idxNode = minHeap.array[idx];

                // Swap positions 
                minHeap.pos[smallestNode.v] = idx;
                minHeap.pos[idxNode.v] = smallest;

                // Swap nodes 
                MinHeapNode t = minHeap.array[smallest];
                minHeap.array[smallest] = minHeap.array[idx];
                minHeap.array[idx] = t;

                minHeapify(minHeap, smallest);
            }
        }

        // A utility function to check if the given minHeap is ampty or not 
        private static int isEmpty(MinHeap minHeap)
        {
            return minHeap.size;
        }

        // Standard function to extract/remove and get minimum node from heap 
        private static MinHeapNode extractMin(MinHeap minHeap)
        {
            if (isEmpty(minHeap) == 0)
            {
                return null;
            }

            // Store the root node 
            MinHeapNode root = minHeap.array[0];

            // Replace root node with last node 
            MinHeapNode lastNode = minHeap.array[minHeap.size - 1];
            minHeap.array[0] = lastNode;

            // Update position of last node 
            minHeap.pos[root.v] = minHeap.size - 1;
            minHeap.pos[lastNode.v] = 0;

            // Reduce heap size and heapify root 
            --minHeap.size;
            minHeapify(minHeap, 0);

            return root;
        }

        // Function to decreasy dist value of a given vertex v. This function 
        // uses pos[] of min heap to get the current index of node in min heap
        private static void decreaseKey(MinHeap minHeap, int v, int dist)
        {
            // Get the index of v in  heap array 
            int i = minHeap.pos[v];

            // Get the node and update its dist value 
            minHeap.array[i].dist = dist;

            // Travel up while the complete tree is not hepified. 
            // This is a O(Logn) loop 
            //Min Heap: root node must be minimum than it's Child node. If not, we need to swap them
            while (i != 0 && minHeap.array[i].dist < minHeap.array[(i - 1) / 2].dist)
            {
                // Swap this node with its parent 
                minHeap.pos[minHeap.array[i].v] = (i - 1) / 2;
                minHeap.pos[minHeap.array[(i - 1) / 2].v] = i;

                //Swap Node
                MinHeapNode t = minHeap.array[i];
                minHeap.array[i] = minHeap.array[(i - 1) / 2];
                minHeap.array[(i - 1) / 2] = t;

                // move to parent index 
                i = (i - 1) / 2;
            }
        }

        // A utility function to check if a given vertex 
        // 'v' is in min heap or not 
        private static bool isInMinHeap(MinHeap minHeap, int v)
        {
            if (minHeap.pos[v] < minHeap.size)
            {
                return true;
            }
            return false;
        }

        // A utility function used to print the solution (This only prints shortest distance)
        private static void printArr(int[] dist, int n, int[] parents)
        {
            Console.Write("Vertex   Distance from Source \t Path\n");
            for (int i = 0; i < n; ++i)
            {
                Console.Write("{0:D} \t\t {1:D}\t\t\t", i, dist[i]);
                printPath(i, parents);
                Console.WriteLine();
            }
        }

        // Function to print shortest path from source to currentVertex using parents array (This prints path also)
        private static void printPath(int currentVertex, int[] parents)
        {
            // Base case : Source node has been processed  
            if (currentVertex == NO_PARENT)
            {
                return;
            }
            printPath(parents[currentVertex], parents);
            Console.Write(currentVertex + " ");
        }

        // The main function that calulates distances of shortest paths from src to all 
        // vertices. It is a O(ELogV) function 
        private static void dijkstra(Graph graph, int src)
        {
            int INT_MAX = int.MaxValue;
            int V = graph.V; // Get the number of vertices in graph
            int[] dist = new int[V]; // dist values used to pick minimum weight edge in cut

            //This is to print shortest distance path
            // Parent array to store shortest path tree  
            int[] parents = new int[V];
            // The starting vertex does not have a parent  
            parents[src] = NO_PARENT;
            //------------------------

            // minHeap represents set E 
            MinHeap minHeap = createMinHeap(V);

            // Initialize min heap with all vertices. dist value of all vertices  
            for (int v = 0; v < V; ++v)
            {
                dist[v] = INT_MAX;
                minHeap.array[v] = newMinHeapNode(v, dist[v]);
                minHeap.pos[v] = v;
            }

            // Make dist value of src vertex as 0 so that it is extracted first 
            //May be redundant
            minHeap.array[src] = newMinHeapNode(src, dist[src]);
            minHeap.pos[src] = src;
            //---------------------

            dist[src] = 0;
            decreaseKey(minHeap, src, dist[src]);

            // Initially size of min heap is equal to V 
            minHeap.size = V;

            // In the followin loop, min heap contains all nodes 
            // whose shortest distance is not yet finalized. 
            while (isEmpty(minHeap) != 0)
            {
                // Extract the vertex with minimum distance value 
                MinHeapNode minHeapNode = extractMin(minHeap);
                int u = minHeapNode.v; // Store the extracted vertex number

                // Traverse through all adjacent vertices of u (the extracted 
                // vertex) and update their distance values 
                AdjListNode pCrawl = graph.array[u].head;
                while (pCrawl != null)
                {
                    int v = pCrawl.dest;

                    // If shortest distance to v is not finalized yet, and distance to v 
                    // through u is less than its previously calculated distance 
                    if (isInMinHeap(minHeap, v) && dist[u] != INT_MAX && pCrawl.weight + dist[u] < dist[v])
                    {
                        dist[v] = dist[u] + pCrawl.weight;
                        parents[v] = u;

                        // update distance value in min heap also 
                        decreaseKey(minHeap, v, dist[v]);
                    }
                    pCrawl = pCrawl.next;
                }
            }

            // print the calculated shortest distances 
            printArr(dist, V, parents);
        }
    }

    public class AdjListNode
    {
        public int dest;
        public int weight;
        public AdjListNode next;
    }

    // A structure to represent an adjacency liat 
    public class AdjList
    {
        public AdjListNode head; // pointer to head node of list
    }

    // A structure to represent a graph. A graph is an array of adjacency lists. 
    // Size of array will be V (number of vertices in graph) 
    public class Graph
    {
        public int V;
        public AdjList[] array;
    }

    // Structure to represent a min heap node 
    public class MinHeapNode
    {
        public int v;
        public int dist;
    }

    // Structure to represent a min heap 
    public class MinHeap
    {
        public int size; // Number of heap nodes present currently
        public int capacity; // Capacity of min heap                                                          
        public int[] pos; // This is needed for decreaseKey()
        public MinHeapNode[] array;
    }

    internal static class Arrays
    {
        public static T[] InitializeWithDefaultInstances<T>(int length) where T : new()
        {
            T[] array = new T[length];
            for (int i = 0; i < length; i++)
            {
                array[i] = new T();
            }
            return array;
        }
    }
}

