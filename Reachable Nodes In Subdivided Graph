using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

//C++ TO C# CONVERTER NOTE: The following #define macro was replaced in-line:
//ORIGINAL LINE: #define pii pair<int, int>

public class Solution
{
    static void Main(string[] args)
    {        
     
        List<List<int>> edges = new List<List<int>>{
        new List<int> { 0, 1, 10},
        new List<int> { 0, 2, 1},
        new List<int> { 1, 2, 2}
        };

        var result = reachableNodes(edges, 6, 3);
    }
    public static int reachableNodes(List<List<int>> edges, int M, int N)
    {
        Dictionary <int, List<Tuple<int, int>>> graph = new Dictionary<int, List<Tuple<int, int>>>(N);     

        foreach (List<int> edge in edges)
        {
            int u = edge[0];
            int v = edge[1];
            int w = edge[2];
            
            if (graph.ContainsKey(u))
            {
                graph[u].Add(Tuple.Create(v, w));
            }
            else
            {
                graph.Add(u, new List<Tuple<int, int>> { Tuple.Create(v, w) });
            }

            if (graph.ContainsKey(v))
            {
                graph[v].Add(Tuple.Create(u, w));
            }
            else
            {
                graph.Add(v, new List<Tuple<int, int>> { Tuple.Create(u, w) });
            }
        }

        SortedDictionary<int, int> dist = new SortedDictionary<int, int>();
        dist[0] = 0;
        for (int i = 1; i < N; ++i)
        {
            dist[i] = M + 1;
        }

        SortedDictionary<Tuple<int, int>, int> used = new SortedDictionary<Tuple<int, int>, int>();
        int ans = 0;

        //priority_queue<Tuple<int, int>, List<Tuple<int, int>>, greater<Tuple<int, int>>> pq = new priority_queue<Tuple<int, int>, List<Tuple<int, int>>, greater<Tuple<int, int>>>();
        Queue<Tuple<int, int>> pq = new Queue<Tuple<int, int>>();
        pq.Enqueue(Tuple.Create(0, 0));

        while (pq.Count() != 0)
        {
            Tuple<int, int> top = pq.Peek();
            pq.Dequeue();
            int d = top.Item1;
            int node = top.Item2;
            if (d > dist[node])
            {
                continue;
            }
            dist[node] = d;

            // Each node is only visited once.  We've reached
            // a node in our original graph.
            ans++;

            foreach (var pair in graph[node])
            {
                // M - d is how much further we can walk from this node;
                // weight is how many new nodes there are on this edge.
                // v is the maximum utilization of this edge.
                int nei = pair.Item1;
                int weight = pair.Item2;
                used[Tuple.Create(node, nei)] = Math.Min(weight, M - d);

                // d2 is the total distance to reach 'nei' (neighbor) node
                // in the original graph.
                int d2 = d + weight + 1;
                if (d2 < Math.Min(dist[nei], M + 1))
                {
                    pq.Enqueue(Tuple.Create(d2, nei));
                    dist[nei] = d2;
                }
            }
        }

        // At the end, each edge (u, v, w) can be used with a maximum
        // of w new nodes: a max of used[u, v] nodes from one side,
        // and used[v, u] nodes from the other.
        foreach (List<int> edge in edges)
        {
            int u = edge[0];
            int v = edge[1];
            int w = edge[2];
            ans += Math.Min(w, used[Tuple.Create(u, v)] + used[Tuple.Create(v, u)]);
        }
        return ans;
    }
}

