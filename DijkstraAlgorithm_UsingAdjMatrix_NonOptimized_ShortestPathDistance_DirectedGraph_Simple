using System;
using System.Linq;

namespace Amazon
{
    class DijkstraAlgorithm_UsingAdjMatrix_NonOptimized_ShortestPathDistance_DirectedGraph_Simple
    {
        static Vertex[] vertexList = new Vertex[]
            {
                new Vertex("Zero"), new Vertex("One"), new Vertex("Two"),
                new Vertex("Three"), new Vertex("Four"), new Vertex("Five"),
                new Vertex("Six"), new Vertex("Seven"), new Vertex("Eight")
            };

        static int[,] adj = new int[,] { {0,5,0,2,8,0,0,0,0}, { 0,0,0,0,2,0,0,0,0}, {0,3,0,0,0,4,0,0,0},
                                         {0,0,0,0,7,0,8,0,0}, {0,0,0,0,0,9,0,4,0}, {0,6,0,0,0,0,0,0,0},
                                         {0,0,0,0,0,0,0,9,0}, {0,0,0,5,0,3,0,0,5}, {0,0,0,0,0,3,0,0,0} };

        static int n = vertexList.Count();

        private readonly static int TEMPORARY = 1;
        private readonly static int PERMANENT = 2;
        private readonly static int NIL = -1;
        private readonly static int INFINITY = 99999;

        static void Main(string[] args)
        {
            //Here Source is Zero
            FindPaths("Zero");
        }

        private static void Dijkstra(int s)
        {
            int v, c;
            for (v = 0; v < n; v++)
            {
                vertexList[v].status = TEMPORARY;
                vertexList[v].pathLength = INFINITY;
                vertexList[v].predecessor = NIL;
            }

            vertexList[s].pathLength = 0;

            while (true)
            {
                c = TempVertexMinPL();

                if (c == NIL)
                    return;

                vertexList[c].status = PERMANENT;

                for (v = 0; v < n; v++)
                {
                    if (IsAdjacent(c, v) && vertexList[v].status == TEMPORARY)
                        if (vertexList[c].pathLength + adj[c, v] < vertexList[v].pathLength)
                        {
                            vertexList[v].predecessor = c;
                            vertexList[v].pathLength = vertexList[c].pathLength + adj[c, v];
                        }
                }
            }
        }

        private static int TempVertexMinPL()
        {
            int min = INFINITY;
            int x = NIL;
            for (int v = 0; v < n; v++)
            {
                if (vertexList[v].status == TEMPORARY && vertexList[v].pathLength < min)
                {
                    min = vertexList[v].pathLength;
                    x = v;
                }
            }
            return x;
        }

        public static void FindPaths(string source)
        {
            int s = GetIndex(source);

            Dijkstra(s);

            Console.WriteLine("Source Vertex: " + source + "\n");

            for (int v = 0; v < n; v++)
            {
                Console.WriteLine("Destination Vertex: " + vertexList[v].name);
                if (vertexList[v].pathLength == INFINITY)
                    Console.WriteLine("There is no path from " + source + " to vertex " + vertexList[v].name + "\n");
                else
                    FindPath(s, v);
            }
        }

        private static void FindPath(int s, int v)
        {
            int i, u;
            int[] path = new int[n];
            int sd = 0;
            int count = 0;

            while (v != s)
            {
                count++;
                path[count] = v;
                u = vertexList[v].predecessor;
                sd += adj[u, v];
                v = u;
            }
            count++;
            path[count] = s;

            Console.Write("Shortest Path is: ");
            for (i = count; i >= 1; i--)
                Console.Write(path[i] + " ");
            Console.WriteLine("\n Shortest distance is: " + sd + "\n");
        }

        private static int GetIndex(string s)
        {
            for (int i = 0; i < n; i++)
                if (s.Equals(vertexList[i].name))
                    return i;
            throw new System.InvalidOperationException("Invalid Vertex");
        }

        public static bool IsAdjacent(int c, int v)
        {
            if (adj[c, v] == 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
    }

    class Vertex
    {
        public string name;
        public int status;
        public int predecessor;
        public int pathLength;

        public Vertex(string name)
        {
            this.name = name;
        }
    }
}
