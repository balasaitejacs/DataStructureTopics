/*
URL: https://www.koderdojo.com/blog/breadth-first-search-and-shortest-path-in-csharp-and-net-core
Similar format for DFS: https://www.koderdojo.com/blog/depth-first-search-algorithm-in-csharp-and-net-core
Time Complexity: O(V+E) where V is number of vertices in the graph and E is number of edges in the graph.
*/
using System;
using System.Collections;
using System.Collections.Generic;

namespace Amazon
{
    public class BFS_Graph_Traversal
    {
        static void Main(string[] args)
        {
            var vertices = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
            var edges = new[]{Tuple.Create(1,2), Tuple.Create(1,3),
                Tuple.Create(2,4), Tuple.Create(3,5), Tuple.Create(3,6),
                Tuple.Create(4,7), Tuple.Create(5,7), Tuple.Create(5,8),
                Tuple.Create(5,6), Tuple.Create(8,9), Tuple.Create(9,10)};

            var graph = new Graph<int>(vertices, edges);
            var bgs_Graph_Traversal = new BFS_Graph_Traversal();

            //BFS Traversal            
            //Output: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
            /*
              Traversal: 
              Start Level 0: 1
              Traverse Level 1: 2, 3
              Traverse Level 2: 4, 5, 6
              Traverse Level 3: 7, 8
              Traverse Level 4: 9, 10 
            */
            Console.WriteLine(string.Join(", ", bgs_Graph_Traversal.BFS(graph, 1)));

            //Shortest Path with BFS:            
            // shortest path to  1: 1
            // shortest path to  2: 1, 2
            // shortest path to  3: 1, 3
            // shortest path to  4: 1, 2, 4
            // shortest path to  5: 1, 3, 5
            // shortest path to  6: 1, 3, 6
            // shortest path to  7: 1, 2, 4, 7
            // shortest path to  8: 1, 3, 5, 8
            // shortest path to  9: 1, 3, 5, 8, 9
            // shortest path to 10: 1, 3, 5, 8, 9, 10
            var startVertex = 1;
            var shortestPath = bgs_Graph_Traversal.ShortestPathFunction(graph, startVertex);
            foreach (var vertex in vertices)
                Console.WriteLine("shortest path to {0,2}: {1}",
                        vertex, string.Join(", ", shortestPath(vertex)));

        }

        /*
           Breadth-First Search in C#
           As mentioned before, breadth-first search visits its closest neighbors level-by-level 
           when traversing the graph. The code for breadth-first search is nearly identical to 
           depth-first search except we will be using a Queue instead of a Stack to make sure we 
           visit the closest neighbors first. Here is an example of breadth-first search in C#.
         */
        public HashSet<T> BFS<T>(Graph<T> graph, T start)
        {
            var visited = new HashSet<T>();

            if (!graph.AdjacencyList.ContainsKey(start))
                return visited;

            var queue = new Queue<T>();
            queue.Enqueue(start);

            while (queue.Count > 0)
            {
                var vertex = queue.Dequeue();

                if (visited.Contains(vertex))
                    continue;

                visited.Add(vertex);

                foreach (var neighbor in graph.AdjacencyList[vertex])
                    if (!visited.Contains(neighbor))
                        queue.Enqueue(neighbor);
            }

            return visited;
        }

        /*
           Shortest Path Using Breadth-First Search in C#
           Breadth-first search is unique with respect to depth-first search in that you can use 
           breadth-first search to find the shortest path between 2 vertices. 
           This assumes an unweighted graph. The shortest path in this case is defined as the path 
           with the minimum number of edges between the two vertices.

           In these cases it might be useful to calculate the shortest path to all vertices in the 
           graph from the starting vertex, and provide a function that allows the client application 
           to query for the shortest path to any other vertex. I've created a ShortestPathFunction 
           in C# that does just this. It caculates the shortest path to all vertices from a starting 
           vertex and then returns a function that allows one to query for the shortest path to any 
           vertex from the original starting vertex.

           Breadth-first search is being used to traverse the graph from the starting vertex and 
           storing how it got to each node ( the previous node ) into a C# Dictionary, called previous. 
           To find the shortest path to a node, the code looks up the previous node of the destination 
           node and continues looking at all previous nodes until it arrives at the starting node. 
           Since this will be the path in reverse, the code simply reverses the list and returns it.
         */
        public Func<T, IEnumerable<T>> ShortestPathFunction<T>(Graph<T> graph, T start)
        {
            var previous = new Dictionary<T, T>();

            var queue = new Queue<T>();
            queue.Enqueue(start);

            while (queue.Count > 0)
            {
                var vertex = queue.Dequeue();
                foreach (var neighbor in graph.AdjacencyList[vertex])
                {
                    if (previous.ContainsKey(neighbor))
                        continue;

                    previous[neighbor] = vertex;
                    queue.Enqueue(neighbor);
                }
            }

            Func<T, IEnumerable<T>> shortestPath = v => {
                var path = new List<T> { };

                var current = v;
                while (!current.Equals(start))
                {
                    path.Add(current);
                    current = previous[current];
                };

                path.Add(start);
                path.Reverse();

                return path;
            };

            return shortestPath;
        }

    }
    public class Graph<T>
    {
        public Graph() { }
        public Graph(IEnumerable<T> vertices, IEnumerable<Tuple<T, T>> edges)
        {
            foreach (var vertex in vertices)
                AddVertex(vertex);

            foreach (var edge in edges)
                AddEdge(edge);
        }

        public Dictionary<T, HashSet<T>> AdjacencyList { get; } = new Dictionary<T, HashSet<T>>();

        public void AddVertex(T vertex)
        {
            AdjacencyList[vertex] = new HashSet<T>();
        }

        public void AddEdge(Tuple<T, T> edge)
        {
            if (AdjacencyList.ContainsKey(edge.Item1) && AdjacencyList.ContainsKey(edge.Item2))
            {
                AdjacencyList[edge.Item1].Add(edge.Item2);
                AdjacencyList[edge.Item2].Add(edge.Item1);
            }
        }
    }
}
