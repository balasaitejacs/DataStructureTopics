URL: https://www.geeksforgeeks.org/how-to-determine-if-a-binary-tree-is-balanced/

Question:
How to determine if a binary tree is height-balanced?
A tree where no leaf is much farther away from the root than any other leaf. 
Different balancing schemes allow different definitions of “much farther” and 
different amounts of work to keep them balanced.

Time Complexity: O(n)

Answer:
using System;
using System.Collections;
using static Amazon.BinaryTree;

namespace Amazon
{
    class Program
    {        
        //Time Complexity: O(n)
        static void Main(string[] args)
        {
            Height height = new Height();

            /* Constructed binary tree is  
                       1  
                     /   \  
                    2      3  
                  /  \    /  
                4     5  6  
                /  
               7         */
            BinaryTree tree = new BinaryTree();
            tree.root = new Node(1);
            tree.root.left = new Node(2);
            tree.root.right = new Node(3);
            tree.root.left.left = new Node(4);
            tree.root.left.right = new Node(5);
            tree.root.right.left = new Node(6);
            tree.root.left.left.left = new Node(7);

            if (tree.isBalanced(tree.root, height))
            {
                Console.WriteLine("Tree is balanced");
            }
            else
            {
                Console.WriteLine("Tree is not balanced");
            }            
        }
    }

    // A wrapper class used to modify height across  
    // recursive calls.  
    public class Height
    {
        public int height = 0;
    }

    public class BinaryTree
    {

        public Node root;

        /* Returns true if binary tree with root as root is height-balanced */
        public virtual bool isBalanced(Node root, Height height)
        {
            /* If tree is empty then return true */
            if (root == null)
            {
                height.height = 0;
                return true;
            }

            /* Get heights of left and right sub trees */
            Height lheight = new Height(), rheight = new Height();
            bool l = isBalanced(root.left, lheight);
            bool r = isBalanced(root.right, rheight);
            int lh = lheight.height, rh = rheight.height;

            /* Height of current node is max of heights of  
               left and right subtrees plus 1*/
            height.height = (lh > rh ? lh : rh) + 1;

            /* If difference between heights of left and right  
               subtrees is more than 2 then this node is not balanced  
               so return 0 */
            if ((lh - rh >= 2) || (rh - lh >= 2))
            {
                return false;
            }

            /* If this node is balanced and left and right subtrees  
               are balanced then return true */
            else
            {
                return l && r;
            }
        }


        /*  The function Compute the "height" of a tree. Height is the  
            number of nodes along the longest path from the root node  
            down to the farthest leaf node.*/
        //public virtual int height(Node node)
        //{
        //    /* base case tree is empty */
        //    if (node == null)
        //    {
        //        return 0;
        //    }

        //    /* If tree is not empty then height = 1 + max of left  
        //     height and right heights */
        //    return 1 + Math.Max(height(node.left), height(node.right));
        //}       

        public class Node
        {
            public int data;
            public Node left, right;
            public Node(int d)
            {
                data = d;
                left = right = null;
            }
        }

    }

}
