using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Amazon
{
    class Program
    {
        //There is issue with this code but it is sufficinet for interview.
        public static int heapSize = 2;
        public static int currentHeapSize = 0;
        public static MaxHeapNode[] MaxHeapNodesArray = new MaxHeapNode[heapSize];
        static void Main(string[] args)
        {
            MaxHeapNode heapNode = new MaxHeapNode();
            int[] coordinatePoint = { 1, -2 };
            heapNode.coordinatePoint = coordinatePoint;
            heapNode.distance = (coordinatePoint[0] * coordinatePoint[0]) + (coordinatePoint[1] * coordinatePoint[1]);
            MaxHeapInsert(heapNode);

            int[] coordinatePoint1 = { 3, 4 };
            heapNode.coordinatePoint = coordinatePoint1;
            heapNode.distance = (coordinatePoint1[0] * coordinatePoint1[0]) + (coordinatePoint1[1] * coordinatePoint1[1]);
            MaxHeapInsert(heapNode);

            int[] coordinatePoint2 = { 1, -1 };
            heapNode.coordinatePoint = coordinatePoint2;
            heapNode.distance = (coordinatePoint2[0] * coordinatePoint2[0]) + (coordinatePoint2[1] * coordinatePoint2[1]);
            MaxHeapInsert(heapNode);

            var sam = MaxHeapNodesArray;

        }

        public static int getLeftChildIndex(int index)
        {
            return 2 * index + 1;
        }
        public static int getRightChildIndex(int index)
        {
            return 2 * index + 2;
        }
        public static int getParentIndex(int index)
        {
            return (index - 1) / 2;
        }

        public static bool hasLeftChild(int index)
        {
            return getLeftChildIndex(index) < heapSize;
        }
        public static bool hasRightChild(int index)
        {
            return getRightChildIndex(index) < heapSize;
        }
        public static bool hasParent(int index)
        {
            return getParentIndex(index) >= 0;
        }

        public static void MaxHeapInsert(MaxHeapNode heapNode)
        {
            if (currentHeapSize < heapSize)
            {
                MaxHeapNodesArray[currentHeapSize] = heapNode;
                if (currentHeapSize > 0)
                    heapifyUp();
                currentHeapSize++;
            }
            else
            {
                MaxHeapReplace(heapNode);
            }
        }

        public static void MaxHeapReplace(MaxHeapNode heapNode)
        {
            if (heapNode.distance < MaxHeapNodesArray[0].distance)
            {
                MaxHeapNodesArray[0] = heapNode;
                heapifyDown();
            }

        }

        public static void heapifyUp()
        {
            int index = heapSize - 1;
            while (index != 0 && hasParent(index))
            {
                if (MaxHeapNodesArray[index].distance < MaxHeapNodesArray[getParentIndex(index)].distance)
                {
                    swap(index, getParentIndex(index));
                }
                index = getParentIndex(index);
            }
        }

        public static void heapifyDown()
        {
            int index = 0;
            while (hasLeftChild(index))
            {
                int largerIndex = getLeftChildIndex(index);
                if (hasRightChild(index) && (MaxHeapNodesArray[getRightChildIndex(index)].distance > MaxHeapNodesArray[getLeftChildIndex(index)].distance))
                {
                    largerIndex = getRightChildIndex(index);
                }

                if (MaxHeapNodesArray[index].distance < MaxHeapNodesArray[largerIndex].distance)
                {
                    break;
                }
                else
                {
                    swap(index, largerIndex);
                }

                index = largerIndex;
            }
        }

        public static void swap(int heapNode1, int heapNode2)
        {
            var temp = MaxHeapNodesArray[heapNode1];
            MaxHeapNodesArray[heapNode1] = MaxHeapNodesArray[heapNode2];
            MaxHeapNodesArray[heapNode2] = temp;
        }

    }

    public class MaxHeapNode
    {
        public int distance { get; set; }
        public int[] coordinatePoint { get; set; }
    }

}
